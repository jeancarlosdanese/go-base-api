// tests/mocks/mock_token_redis_service.go

// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	models "github.com/jeancarlosdanese/go-base-api/internal/domain/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenRedisService is an autogenerated mock type for the TokenRedisService type
type TokenRedisService struct {
	mock.Mock
}

// GetTokenDataRedisFromToken provides a mock function with given fields: token
func (_m *TokenRedisService) GetTokenDataRedisFromToken(token string) (*models.TokenDataRedis, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenDataRedisFromToken")
	}

	var r0 *models.TokenDataRedis
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.TokenDataRedis, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.TokenDataRedis); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenDataRedis)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTokenDataRedis provides a mock function with given fields: user, token, refreshToken, accessDuration
func (_m *TokenRedisService) SaveTokenDataRedis(user *models.User, token string, refreshToken string, accessDuration time.Duration) error {
	ret := _m.Called(user, token, refreshToken, accessDuration)

	if len(ret) == 0 {
		panic("no return value specified for SaveTokenDataRedis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User, string, string, time.Duration) error); ok {
		r0 = rf(user, token, refreshToken, accessDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRefreshToken provides a mock function with given fields: refreshToken
func (_m *TokenRedisService) ValidateRefreshToken(refreshToken string) (*models.TokenDataRedis, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *models.TokenDataRedis
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.TokenDataRedis, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *models.TokenDataRedis); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenDataRedis)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenRedisService creates a new instance of TokenRedisService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRedisService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRedisService {
	mock := &TokenRedisService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
