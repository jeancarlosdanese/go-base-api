// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	models "github.com/jeancarlosdanese/go-base-api/internal/domain/models"

	uuid "github.com/google/uuid"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: c, email, password, origin
func (_m *UserService) Authenticate(c *gin.Context, email string, password string, origin string) (*models.User, error) {
	ret := _m.Called(c, email, password, origin)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string, string) (*models.User, error)); ok {
		return rf(c, email, password, origin)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string, string) *models.User); ok {
		r0 = rf(c, email, password, origin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, string, string) error); ok {
		r1 = rf(c, email, password, origin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: c, entity
func (_m *UserService) Create(c *gin.Context, entity *models.User) (*models.User, error) {
	ret := _m.Called(c, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User) (*models.User, error)); ok {
		return rf(c, entity)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User) *models.User); ok {
		r0 = rf(c, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *models.User) error); ok {
		r1 = rf(c, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserWithPassword provides a mock function with given fields: c, entity
func (_m *UserService) CreateUserWithPassword(c *gin.Context, entity *models.UserCreate) (*models.User, error) {
	ret := _m.Called(c, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserWithPassword")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.UserCreate) (*models.User, error)); ok {
		return rf(c, entity)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.UserCreate) *models.User); ok {
		r0 = rf(c, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *models.UserCreate) error); ok {
		r1 = rf(c, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: c, id
func (_m *UserService) Delete(c *gin.Context, id uuid.UUID) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: c
func (_m *UserService) GetAll(c *gin.Context) ([]models.User, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]models.User, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []models.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *UserService) GetByID(c *gin.Context, id uuid.UUID) (*models.User, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) (*models.User, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) *models.User); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnlyByID provides a mock function with given fields: c, id
func (_m *UserService) GetOnlyByID(c *gin.Context, id uuid.UUID) (*models.User, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOnlyByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) (*models.User, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) *models.User); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, entity
func (_m *UserService) Update(c *gin.Context, id uuid.UUID, entity *models.User) (*models.User, error) {
	ret := _m.Called(c, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User) (*models.User, error)); ok {
		return rf(c, entity)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User) *models.User); ok {
		r0 = rf(c, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *models.User) error); ok {
		r1 = rf(c, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePartial provides a mock function with given fields: c, id, updateData
func (_m *UserService) UpdatePartial(c *gin.Context, id uuid.UUID, updateData map[string]interface{}) (*models.User, error) {
	ret := _m.Called(c, id, updateData)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartial")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID, map[string]interface{}) (*models.User, error)); ok {
		return rf(c, id, updateData)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID, map[string]interface{}) *models.User); ok {
		r0 = rf(c, id, updateData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, uuid.UUID, map[string]interface{}) error); ok {
		r1 = rf(c, id, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
